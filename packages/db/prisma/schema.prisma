generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  username    String?      @unique
  name        String?
  email       String       @unique
  provider    AuthProvider
  password    String?
  rating      Int          @default(1200)
  gameAsWhite Game[]       @relation("GamesAsWhite")
  gameAsBlack Game[]       @relation("GamesAsBlack")
  createdAt   DateTime     @default(now())
  lastlogin   DateTime?

  @@index([rating])
}

model Game {
  id            String      @id @default(uuid())
  whitePlayerid String
  blackPlayerid String
  whitePlayer   User        @relation("GamesAsWhite", fields: [whitePlayerid], references: [id])
  blackPlayer   User        @relation("GamesAsBlack", fields: [blackPlayerid], references: [id])
  status        GameStatus
  result        GameResult?
  timecontrol   Timecontrol
  startingfen   String      @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  currentfen    String?
  startAt       DateTime    @default(now())
  endAt         DateTime?
  moves         Move[]
  opening       String?
  event         String?

  @@index([status, result])
}

model Move {
  id         String   @id @default(uuid())
  gameId     String
  game       Game     @relation(fields: [gameId], references: [id])
  movenumber Int
  from       String
  to         String
  comments   String?
  before     String
  after      String
  timetaken  Int?     @default(0)
  createdAt  DateTime @default(now())
  san        String?

  @@index([gameId])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIME_UP
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}

enum Timecontrol {
  CLASSICAL
  RAPID
  BLITZ
  BULLET
}

enum AuthProvider {
  EMAIL
  GITHUB
  GOOGLE
  FACEBOOK
}
